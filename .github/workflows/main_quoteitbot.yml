# .github/workflows/deploy-discord-bot-to-azure.yml

name: Build and Deploy Discord Bot to Azure App Service

on:
  push:
    branches:
      - main # Or your bot's main deployment branch
    # Optional: paths filter if this repo contains more than just the bot
    # paths:
    #   - 'LMBs-robot-services/**' # Assuming bot code is in this subfolder
    #   - '.github/workflows/deploy-discord-bot-to-azure.yml'
  workflow_dispatch: # Allows manual triggering

jobs:
  build-and-package-discord-bot:
    name: Build and Package Discord Bot
    runs-on: ubuntu-latest
    # If your bot code is in a subfolder like 'LMBs-robot-services/', uncomment and set this:
    # defaults:
    #   run:
    #     working-directory: ./LMBs-robot-services

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x' # Match your bot's required Node.js version

      - name: Debug: Show current directory and list files
        # If using a working-directory default for the job, this will be inside it.
        # If not, this runs at repo root. Adjust 'cd' if needed.
        run: |
          echo "--- Current directory: $(pwd) ---"
          echo "--- Listing files: ---"
          ls -la
          echo "--- Contents of package.json (if exists here): ---"
          cat package.json || echo "package.json not found in $(pwd)"

      - name: Install dependencies
        # If bot is in a subfolder and no job default working-directory is set:
        # working-directory: ./LMBs-robot-services
        run: npm ci # 'npm ci' is generally preferred for CI for faster, more reliable installs

      # If your bot has a build step (e.g., TypeScript compilation), add it here:
      # - name: Build Bot Application
      #   working-directory: ./LMBs-robot-services # If needed
      #   run: npm run build --if-present

      # The 'npm run test --if-present' line is removed to prevent failure
      # from the default "echo 'Error: no test specified' && exit 1" script.
      # Add a real test step here if/when you have tests.

      - name: Prepare deployment package (excluding node_modules and .env)
        # working-directory: ./LMBs-robot-services # If needed
        run: |
          echo "--- Preparing deployment package from $(pwd) ---"
          mkdir -p ${{ github.workspace }}/deployment_package_bot
          
          echo "--- Copying application files to staging directory... ---"
          # Copy essential files for deployment. App Service will run 'npm install'.
          # Adjust these cp commands based on your bot's actual file structure.
          cp package.json ${{ github.workspace }}/deployment_package_bot/
          cp package-lock.json ${{ github.workspace }}/deployment_package_bot/
          cp index.js ${{ github.workspace }}/deployment_package_bot/ # Assuming index.js is your main entry
          
          # Example: Copy 'utils' and 'commands' folders if they exist
          if [ -d "utils" ]; then cp -r utils ${{ github.workspace }}/deployment_package_bot/; fi
          if [ -d "commands" ]; then cp -r commands ${{ github.workspace }}/deployment_package_bot/; fi
          # DO NOT copy .env (secrets should be Azure App Settings) or node_modules
          # cp .env.example ${{ github.workspace }}/deployment_package_bot/ # Good practice

          echo "--- Contents of staging directory (deployment_package_bot): ---"
          ls -la ${{ github.workspace }}/deployment_package_bot

      - name: Zip the deployment package
        run: |
          echo "--- Zipping contents of deployment_package_bot ---"
          cd ${{ github.workspace }}/deployment_package_bot
          zip -r ../discord-bot-release.zip ./* 
          cd ${{ github.workspace }}
          echo "--- Created discord-bot-release.zip in repository root ---"

      - name: Upload bot artifact
        uses: actions/upload-artifact@v4
        with:
          name: discord-bot-app
          path: discord-bot-release.zip

  deploy-discord-bot-to-azure:
    name: Deploy Discord Bot to Azure App Service
    runs-on: ubuntu-latest
    needs: build-and-package-discord-bot
    environment:
      name: 'Production_Bot' # Use a descriptive environment name
      url: ${{ steps.deploy-to-bot-app.outputs.webapp-url }}
    permissions:
      id-token: write # Required for OIDC login to Azure

    steps:
      - name: Download bot artifact
        uses: actions/download-artifact@v4
        with:
          name: discord-bot-app

      - name: Unzip bot artifact
        run: |
          unzip discord-bot-release.zip -d ./deploy_bot_content
          echo "--- Contents of deploy_bot_content after unzip: ---"
          ls -la ./deploy_bot_content

      - name: Login to Azure (OIDC - Recommended)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_BOT }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_BOT }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_BOT }}

      # Alternative Login using Publish Profile (Simpler if OIDC is complex to set up)
      # - name: Login to Azure (Publish Profile)
      #   uses: azure/login@v2
      #   with:
      #     creds: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_BOT }}


      - name: Deploy to Azure App Service for Bot
        id: deploy-to-bot-app
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'lmb-robot-discord-bot' # NAME OF YOUR BOT'S APP SERVICE
          slot-name: 'Production'
          package: ./deploy_bot_content # Directory containing the unzipped package
                                        # (package.json, index.js, etc.)
